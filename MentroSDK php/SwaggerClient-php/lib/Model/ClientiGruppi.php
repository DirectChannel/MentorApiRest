<?php
/**
 * ClientiGruppi
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Mentor.ApiRest
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ClientiGruppi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ClientiGruppi implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ClientiGruppi';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'codice_cliente' => 'string',
        'codice_cliente_gruppo' => 'string',
        'id_ruolo' => 'string',
        'descrizione_ruolo' => 'string',
        'data_gruppo' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'codice_cliente' => null,
        'codice_cliente_gruppo' => null,
        'id_ruolo' => null,
        'descrizione_ruolo' => null,
        'data_gruppo' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'codice_cliente' => 'CodiceCliente',
        'codice_cliente_gruppo' => 'CodiceClienteGruppo',
        'id_ruolo' => 'idRuolo',
        'descrizione_ruolo' => 'DescrizioneRuolo',
        'data_gruppo' => 'DataGruppo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'codice_cliente' => 'setCodiceCliente',
        'codice_cliente_gruppo' => 'setCodiceClienteGruppo',
        'id_ruolo' => 'setIdRuolo',
        'descrizione_ruolo' => 'setDescrizioneRuolo',
        'data_gruppo' => 'setDataGruppo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'codice_cliente' => 'getCodiceCliente',
        'codice_cliente_gruppo' => 'getCodiceClienteGruppo',
        'id_ruolo' => 'getIdRuolo',
        'descrizione_ruolo' => 'getDescrizioneRuolo',
        'data_gruppo' => 'getDataGruppo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['codice_cliente'] = isset($data['codice_cliente']) ? $data['codice_cliente'] : null;
        $this->container['codice_cliente_gruppo'] = isset($data['codice_cliente_gruppo']) ? $data['codice_cliente_gruppo'] : null;
        $this->container['id_ruolo'] = isset($data['id_ruolo']) ? $data['id_ruolo'] : null;
        $this->container['descrizione_ruolo'] = isset($data['descrizione_ruolo']) ? $data['descrizione_ruolo'] : null;
        $this->container['data_gruppo'] = isset($data['data_gruppo']) ? $data['data_gruppo'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets codice_cliente
     *
     * @return string
     */
    public function getCodiceCliente()
    {
        return $this->container['codice_cliente'];
    }

    /**
     * Sets codice_cliente
     *
     * @param string $codice_cliente codice_cliente
     *
     * @return $this
     */
    public function setCodiceCliente($codice_cliente)
    {
        $this->container['codice_cliente'] = $codice_cliente;

        return $this;
    }

    /**
     * Gets codice_cliente_gruppo
     *
     * @return string
     */
    public function getCodiceClienteGruppo()
    {
        return $this->container['codice_cliente_gruppo'];
    }

    /**
     * Sets codice_cliente_gruppo
     *
     * @param string $codice_cliente_gruppo codice_cliente_gruppo
     *
     * @return $this
     */
    public function setCodiceClienteGruppo($codice_cliente_gruppo)
    {
        $this->container['codice_cliente_gruppo'] = $codice_cliente_gruppo;

        return $this;
    }

    /**
     * Gets id_ruolo
     *
     * @return string
     */
    public function getIdRuolo()
    {
        return $this->container['id_ruolo'];
    }

    /**
     * Sets id_ruolo
     *
     * @param string $id_ruolo id_ruolo
     *
     * @return $this
     */
    public function setIdRuolo($id_ruolo)
    {
        $this->container['id_ruolo'] = $id_ruolo;

        return $this;
    }

    /**
     * Gets descrizione_ruolo
     *
     * @return string
     */
    public function getDescrizioneRuolo()
    {
        return $this->container['descrizione_ruolo'];
    }

    /**
     * Sets descrizione_ruolo
     *
     * @param string $descrizione_ruolo descrizione_ruolo
     *
     * @return $this
     */
    public function setDescrizioneRuolo($descrizione_ruolo)
    {
        $this->container['descrizione_ruolo'] = $descrizione_ruolo;

        return $this;
    }

    /**
     * Gets data_gruppo
     *
     * @return string
     */
    public function getDataGruppo()
    {
        return $this->container['data_gruppo'];
    }

    /**
     * Sets data_gruppo
     *
     * @param string $data_gruppo data_gruppo
     *
     * @return $this
     */
    public function setDataGruppo($data_gruppo)
    {
        $this->container['data_gruppo'] = $data_gruppo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


